generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DB_CONN")
}

model company {
  companyId         Int                 @id @default(autoincrement())
  companyName       String?             @unique(map: "companyName") @db.VarChar(255)
  logoPath          String              @db.VarChar(255)
  financeTel        String              @db.VarChar(10)
  fax               String?             @db.VarChar(20)
  tel               String              @db.VarChar(8)
  email             String?             @db.VarChar(60)
  whatsapp          String?             @db.VarChar(8)
  address           String              @db.VarChar(100)
  createdBy         Int
  updatedBy         Int?
  companyStatus     Boolean?            @default(true)
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @unique(map: "updatedAt") @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  deletedBy         Int?
  contract_customer contract_customer[]
  contract_items    contract_items[]
  contracts         contracts[]
  expenses          expenses[]
  invoice           invoice[]
  project_item      project_item[]
}

model contract_customer {
  id                                       Int       @id @default(autoincrement())
  companyId                                Int
  customerId                               Int
  contractId                               Int
  createdAt                                DateTime? @db.DateTime(0)
  updatedAt                                DateTime? @db.DateTime(0)
  deletedAt                                DateTime? @db.DateTime(0)
  deletedBy                                Int?
  company                                  company   @relation(fields: [companyId], references: [companyId], onUpdate: Restrict, map: "contract_customer_company_companyId_fk")
  contracts                                contracts @relation(fields: [contractId], references: [contractId], onUpdate: Restrict, map: "contract_customer_contracts_contractId_fk")
  users                                    users     @relation(fields: [customerId], references: [userId], onUpdate: Restrict, map: "contract_customer_users_userId_fk")
  users_contract_customer_deletedByTousers users?    @relation("contract_customer_deletedByTousers", fields: [deletedBy], references: [userId], onDelete: Restrict, onUpdate: Restrict, map: "contract_customer_users_userId_fk_2")

  @@index([companyId], map: "contract_customer_company_companyId_fk")
  @@index([contractId], map: "contract_customer_contracts_contractId_fk")
  @@index([customerId], map: "contract_customer_users_userId_fk")
  @@index([deletedBy], map: "contract_customer_users_userId_fk_2")
}

model contracts {
  contractId                        Int                 @id @default(autoincrement())
  companyId                         Int
  docId                             String              @db.VarChar(15)
  createdBy                         Int
  updatedBy                         Int?
  projectId                         Int
  price                             Float               @db.Float
  customerId                        Int
  totalPrice                        Float               @db.Float
  currency                          String?             @default("LAK") @db.VarChar(10)
  contractStatus                    String?             @default("ACTIVE") @db.VarChar(30)
  area                              Float               @db.Float
  numberOfInstallment               Int?                @default(1)
  payDay                            DateTime?           @db.Date
  modeOfPayment                     String?             @default("monthly") @db.VarChar(20)
  payInAdvance                      Float?              @default(0) @db.Float
  createdAt                         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt                         DateTime?           @default(now()) @db.DateTime(0)
  cancelAt                          DateTime?           @db.DateTime(0)
  cancelBy                          Int?
  reason                            String?             @db.VarChar(255)
  lastInvoice                       Int?
  deletedAt                         DateTime?           @db.DateTime(0)
  deletedBy                         Int?
  contract_customer                 contract_customer[]
  contract_items                    contract_items[]
  company                           company             @relation(fields: [companyId], references: [companyId], onUpdate: Restrict, map: "contracts_company_companyId_fk")
  users_contracts_customerIdTousers users               @relation("contracts_customerIdTousers", fields: [customerId], references: [userId], onUpdate: Restrict, map: "contracts_customerId_userId_fk")
  projects                          projects            @relation(fields: [projectId], references: [projectId], onUpdate: Restrict, map: "contracts_projects_projectId_fk")
  users_contracts_createdByTousers  users               @relation("contracts_createdByTousers", fields: [createdBy], references: [userId], onUpdate: Restrict, map: "contracts_users_userId_fk")
  invoice                           invoice[]
  project_item                      project_item[]
  schedules                         schedules[]

  @@index([customerId], map: "contracts_customerId_userId_fk")
  @@index([projectId], map: "contracts_projects_projectId_fk")
  @@index([createdBy], map: "contracts_users_userId_fk")
  @@index([companyId], map: "contracts_company_companyId_fk")
}

model exchange {
  exchangeId Int       @id @default(autoincrement())
  companyId  Int
  thb        Float     @db.Float
  usd        Float     @db.Float
  chy        Float     @db.Float
  createdBy  Int
  updatedBy  Int?
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  deletedBy  Int?
}

model expenses {
  id          Int       @id @default(autoincrement())
  description String    @db.VarChar(255)
  amount      Decimal   @db.Decimal(10, 2)
  projectId   Int
  expenseDate DateTime  @db.Date
  companyId   Int
  currency    String    @default("LAK") @db.VarChar(10)
  createdAt   DateTime  @default(now()) @db.Timestamp(0)
  userId      Int
  updatedAt   DateTime? @db.Timestamp(0)
  deletedAt   DateTime? @db.Timestamp(0)
  company     company   @relation(fields: [companyId], references: [companyId], onUpdate: Restrict, map: "expenses_company_companyId_fk")
  projects    projects  @relation(fields: [projectId], references: [projectId], onUpdate: Restrict, map: "expenses_projects_projectId_fk")
  users       users     @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "expenses_users_userId_fk")

  @@index([projectId], map: "expenses_projects_projectId_fk")
  @@index([companyId], map: "expenses_company_companyId_fk")
  @@index([userId], map: "expenses_users_userId_fk")
}

model invoice {
  invoiceId                       Int       @id @default(autoincrement())
  invoiceStatus                   String?   @default("PENDING") @db.VarChar(20)
  fines                           Float     @default(0) @db.Float
  paymentMethod                   String?   @db.VarChar(50)
  exchangeRate                    Float?    @db.Float
  currencyExchange                String?   @db.VarChar(5)
  amount                          Float     @db.Float
  debt                            Float     @default(0) @db.Float
  currency                        String    @db.VarChar(30)
  contractId                      Int
  companyId                       Int
  projectId                       Int
  numberOfInstallment             Int?      @default(0)
  comment                         String?   @db.VarChar(255)
  monthly                         String?   @db.VarChar(10)
  billPath                        String?   @db.VarChar(255)
  paidDate                        DateTime? @db.DateTime(0)
  createdBy                       Int?
  createdAt                       DateTime? @default(now()) @db.DateTime(0)
  updatedAt                       DateTime? @default(now()) @db.DateTime(0)
  reservedBy                      Int?
  reservedAt                      DateTime? @db.DateTime(0)
  remindSentTime                  Int?      @default(0)
  remindSentDate                  DateTime? @db.DateTime(0)
  company                         company   @relation(fields: [companyId], references: [companyId], onUpdate: Restrict, map: "invoice_company_companyId_fk")
  contracts                       contracts @relation(fields: [contractId], references: [contractId], onUpdate: Restrict, map: "invoice_contracts_contractId_fk")
  projects                        projects  @relation(fields: [projectId], references: [projectId], onUpdate: Restrict, map: "invoice_projects_projectId_fk")
  users                           users?    @relation(fields: [createdBy], references: [userId], onDelete: Restrict, onUpdate: Restrict, map: "invoice_users_userId_fk")
  users_invoice_reservedByTousers users?    @relation("invoice_reservedByTousers", fields: [reservedBy], references: [userId], onDelete: Restrict, onUpdate: Restrict, map: "invoice_users_userId_fk_3")

  @@index([projectId], map: "invoice_projects_projectId_fk")
  @@index([companyId], map: "invoice_company_companyId_fk")
  @@index([contractId], map: "invoice_contracts_contractId_fk")
  @@index([createdBy], map: "invoice_users_userId_fk_2")
  @@index([reservedBy], map: "invoice_users_userId_fk_3")
}

model logs {
  logId       Int       @id @default(autoincrement())
  description String?   @db.VarChar(200)
  path        String    @db.VarChar(100)
  body        String?   @db.Text
  userId      Int
  companyId   Int?
  ip          String?   @db.VarChar(100)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
}

model news {
  nId         Int       @id @default(autoincrement())
  content     String    @db.LongText
  tel         String?   @db.Text
  imagePath   String?   @db.VarChar(200)
  ip          String?   @db.VarChar(50)
  userId      Int
  sentType    String    @db.VarChar(200)
  sentStatus  String?   @default("PENDING") @db.VarChar(10)
  dateForSent DateTime? @db.DateTime(0)
  multi       String?   @default("YES") @db.VarChar(5)
  sentDate    DateTime? @db.DateTime(0)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  deletedBy   Int?
}

model otp {
  otpId     Int       @id @default(autoincrement())
  tel       String    @db.VarChar(10)
  code      String    @db.VarChar(10)
  confirm   String?   @default("NO") @db.VarChar(5)
  status    String?   @default("PENDING") @db.VarChar(10)
  sentDate  DateTime? @db.DateTime(0)
  retry     Int?      @default(0)
  createdAt DateTime? @default(now()) @db.DateTime(0)
}

model payment_method {
  id            Int       @id @default(autoincrement())
  companyId     Int
  accountName   String    @db.VarChar(100)
  accountNumber String    @db.VarChar(100)
  qrPath        String?   @db.VarChar(255)
  deletedAt     DateTime? @db.DateTime(0)
  deletedBy     Int?
}

model project_item {
  id             Int              @id @unique(map: "project_item_pk_2") @default(autoincrement())
  title          String           @db.VarChar(100)
  content        String?          @db.VarChar(255)
  projectId      Int
  companyId      Int
  area           Float
  code           String           @db.VarChar(50)
  price          Float?
  createdAt      DateTime         @default(now()) @db.DateTime(0)
  contractId     Int?
  updatedAt      DateTime?        @db.DateTime(0)
  deletedAt      DateTime?        @db.DateTime(0)
  contract_items contract_items[]
  company        company          @relation(fields: [companyId], references: [companyId], onUpdate: Restrict, map: "project_item_company_companyId_fk")
  contracts      contracts?       @relation(fields: [contractId], references: [contractId], onDelete: Restrict, onUpdate: Restrict, map: "project_item_contracts_contractId_fk")
  projects       projects         @relation(fields: [projectId], references: [projectId], onUpdate: Restrict, map: "project_item_projects_projectId_fk")

  @@index([companyId], map: "project_item_company_companyId_fk")
  @@index([contractId], map: "project_item_contracts_contractId_fk")
  @@index([projectId], map: "project_item_projects_projectId_fk")
}

model projects {
  projectId    Int            @id @default(autoincrement())
  companyId    Int
  area         Float?         @db.Float
  code         String?        @unique(map: "code") @db.VarChar(50)
  projectName  String         @db.VarChar(200)
  address      String?        @db.VarChar(100)
  createdBy    Int
  updatedBy    Int?
  createdAt    DateTime?      @default(now()) @db.DateTime(0)
  updatedAt    DateTime?      @default(now()) @db.DateTime(0)
  deletedAt    DateTime?      @db.DateTime(0)
  deletedBy    Int?
  contracts    contracts[]
  expenses     expenses[]
  invoice      invoice[]
  project_item project_item[]
}

model schedules {
  id            Int       @id @unique(map: "schedules_pk_2") @default(autoincrement())
  modeOfPayment String    @db.VarChar(100)
  date          DateTime  @db.DateTime(0)
  contractId    Int
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  contracts     contracts @relation(fields: [contractId], references: [contractId], onUpdate: Restrict, map: "schedules_contracts_contractId_fk")

  @@index([contractId], map: "schedules_contracts_contractId_fk")
}

model stores {
  id           Int       @id @default(autoincrement())
  name         String?   @db.VarChar(255)
  opening_time DateTime? @default(now()) @db.DateTime(0)
  closing_time DateTime? @default(now()) @db.DateTime(0)
  closing_id   String?   @db.VarChar(100)
}

model transaction {
  transactionId   Int       @id @default(autoincrement())
  ip              String    @db.VarChar(200)
  amount          Float     @db.Float
  remark          String?   @db.VarChar(255)
  currency        String    @db.VarChar(5)
  pamentMethod    String    @db.VarChar(50)
  transactionUUID String?   @db.VarChar(50)
  contractId      Int?
  currencyLAK     Float     @db.Float
  currencyTHB     Float     @db.Float
  currencyUSD     Float     @db.Float
  createdBy       Int?
  updatedBy       Int?
  createdAt       DateTime? @default(now()) @db.DateTime(0)
  updatedAt       DateTime? @default(now()) @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
}

model users {
  userId                                               Int                 @id @default(autoincrement())
  companyId                                            Int?
  fullName                                             String              @db.VarChar(80)
  lastName                                             String              @db.VarChar(80)
  tel                                                  String              @unique(map: "tel") @db.VarChar(8)
  password                                             String              @db.VarChar(255)
  role                                                 String?             @default("CUSTOMER") @db.VarChar(10)
  userStatus                                           Boolean?            @default(true)
  createdAt                                            DateTime?           @default(now()) @db.DateTime(0)
  updatedAt                                            DateTime?           @default(now()) @db.DateTime(0)
  contract_customer                                    contract_customer[]
  contract_customer_contract_customer_deletedByTousers contract_customer[] @relation("contract_customer_deletedByTousers")
  contracts_contracts_customerIdTousers                contracts[]         @relation("contracts_customerIdTousers")
  contracts_contracts_createdByTousers                 contracts[]         @relation("contracts_createdByTousers")
  expenses                                             expenses[]
  invoice                                              invoice[]
  invoice_invoice_reservedByTousers                    invoice[]           @relation("invoice_reservedByTousers")
}

model contract_items {
  id            Int          @id @unique(map: "contract_items_pk_2") @default(autoincrement())
  companyId     Int
  contractId    Int
  projectItemId Int
  createdAt     DateTime?    @db.DateTime(0)
  updatedAt     DateTime?    @db.DateTime(0)
  deletedAt     DateTime?    @db.DateTime(0)
  company       company      @relation(fields: [companyId], references: [companyId], onUpdate: Restrict, map: "contract_items_company_companyId_fk")
  contracts     contracts    @relation(fields: [contractId], references: [contractId], onUpdate: Restrict, map: "contract_items_contracts_contractId_fk")
  project_item  project_item @relation(fields: [projectItemId], references: [id], onUpdate: Restrict, map: "contract_items_project_item_id_fk")

  @@index([companyId], map: "contract_items_company_companyId_fk")
  @@index([projectItemId], map: "contract_items_project_item_id_fk")
  @@index([contractId], map: "contract_items_contracts_contractId_fk")
}
