generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("PRISMA_DB_CONN")
}

model company {
  companyId     Int       @id @default(autoincrement())
  companyName   String    @unique(map: "companyName") @db.VarChar(255)
  logoPath      String    @db.VarChar(255)
  fax           String?   @db.VarChar(20)
  tel           String    @db.VarChar(8)
  email         String?   @db.VarChar(60)
  whatsapp      String?   @db.VarChar(8)
  address       String    @db.VarChar(100)
  createdBy     Int
  updatedBy     Int?
  companyStatus Boolean?  @default(true)
  createdAt     DateTime? @default(now()) @db.DateTime(0)
  updatedAt     DateTime? @unique(map: "updatedAt") @db.DateTime(0)
}

model contracts {
  contractId          Int       @id @default(autoincrement())
  companyId           Int
  docId               String    @db.VarChar(15)
  createdBy           Int
  updatedBy           Int?
  projectId           Int
  price               Float     @db.Float
  totalPrice          Float     @db.Float
  currency            String?   @default("LAK") @db.VarChar(10)
  contractStatus      String?   @default("ACTIVE") @db.VarChar(20)
  area                Float     @db.Float
  numberOfInstallment Int       @default(1)
  payDay              DateTime  @db.Date
  modeOfPayment       String?   @default("monthly") @db.VarChar(20)
  payInAdvance        Float?    @default(0) @db.Float
  customerIdOne       Int
  customerIdTwo       Int?
  createdAt           DateTime? @default(now()) @db.DateTime(0)
  updatedAt           DateTime? @default(now()) @db.DateTime(0)
  cancelAt            DateTime? @db.DateTime(0)
  cancelBy            Int?
  reason              String?   @db.VarChar(255)
  lastInvoice         Int?
}

model exchange {
  exchangeId Int       @id @default(autoincrement())
  companyId  Int
  thb        Float     @db.Float
  usd        Float     @db.Float
  createdBy  Int
  updatedBy  Int?
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
}

model invoice {
  invoiceId        Int       @id @default(autoincrement())
  fines            Float?    @default(0) @db.Float
  amount           Float     @db.Float
  debt             Float?    @default(0) @db.Float
  contractId       Int
  currency         String    @db.VarChar(30)
  comment          String?   @db.VarChar(255)
  monthly          String?   @db.VarChar(10)
  paymentMethod    String?   @db.VarChar(50)
  exchangeRate     Float?    @db.Float
  currencyExchange String?   @db.VarChar(5)
  invoiceStatus    String?   @default("PENDING") @db.VarChar(20)
  billPath         String?   @db.VarChar(255)
  paidDate         DateTime? @db.DateTime(0)
  createdBy        Int?
  createdAt        DateTime? @default(now()) @db.DateTime(0)
  reservedBy       Int?
  updatedAt        DateTime? @default(now()) @db.DateTime(0)
  reservedAt       DateTime? @db.DateTime(0)
  remindSentTime   Int?      @default(0)
  remindSentDate   DateTime? @db.DateTime(0)
}

model logs {
  logId       Int       @id @unique(map: "logs_pk2") @default(autoincrement())
  description String?   @db.VarChar(200)
  path        String    @db.VarChar(100)
  body        String?   @db.Text
  userId      Int
  companyId   Int?
  ip          String?   @db.VarChar(100)
  createdAt   DateTime? @default(now()) @db.Timestamp(0)
  deletedAt   DateTime? @db.DateTime(0)
}

model news {
  nId         Int       @id @unique(map: "news_pk2") @default(autoincrement())
  content     String    @db.LongText
  tel         String?   @db.Text
  imagePath   String?   @db.VarChar(200)
  ip          String?   @db.VarChar(50)
  userId      Int
  sentType    String?   @db.VarChar(200)
  sentStatus  String    @default("PENDING") @db.VarChar(10)
  dateForSent DateTime? @db.DateTime(0)
  multi       String?   @default("YES") @db.VarChar(5)
  sentDate    DateTime? @db.DateTime(0)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model otp {
  otpId     Int       @id @unique(map: "otp_pk2") @default(autoincrement())
  tel       String    @db.VarChar(10)
  code      String    @db.VarChar(10)
  confirm   String?   @default("NO") @db.VarChar(5)
  status    String    @default("PENDING") @db.VarChar(10)
  sentDate  DateTime? @db.DateTime(0)
  retry     Int       @default(0)
  createdAt DateTime? @default(now()) @db.DateTime(0)
}

model projects {
  projectId   Int       @id @default(autoincrement())
  companyId   Int
  area        Float     @db.Float
  code        String    @unique(map: "code") @db.VarChar(50)
  projectName String    @db.VarChar(200)
  address     String?   @db.VarChar(100)
  createdBy   Int
  updatedBy   Int?
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
}

model transaction {
  transactionId   Int       @id @default(autoincrement())
  ip              String    @db.VarChar(200)
  amount          Float     @db.Float
  remark          String?   @db.VarChar(255)
  currency        String    @db.VarChar(5)
  pamentMethod    String    @db.VarChar(50)
  transactionUUID String?   @db.VarChar(50)
  contractId      Int
  currencyLAK     Float     @db.Float
  currencyTHB     Float     @db.Float
  currencyUSD     Float     @db.Float
  createdBy       Int?
  updatedBy       Int?
  createdAt       DateTime? @default(now()) @db.DateTime(0)
  updatedAt       DateTime? @default(now()) @db.DateTime(0)
  deletedAt       DateTime? @db.DateTime(0)
}

model users {
  userId     Int       @id @default(autoincrement())
  companyId  Int?
  fullName   String    @db.VarChar(80)
  lastName   String    @db.VarChar(80)
  tel        String    @unique(map: "tel") @db.VarChar(8)
  password   String    @db.VarChar(255)
  role       String    @default("CUSTOMER") @db.VarChar(10)
  userStatus Boolean   @default(true)
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
}

model payment_method {
  id            Int       @id @unique(map: "payment_method_pk2") @default(autoincrement())
  companyId     Int
  accountName   String    @db.VarChar(100)
  accountNumber String    @db.VarChar(100)
  qrPath        String?   @db.VarChar(255)
  deletedAt     DateTime? @db.DateTime(0)
}
